%h2 Call logs

= page_entries_info @logs

%br/
%br/

#call_logs.tablewrapp{style: 'box-shadow: none !important'}
  %table.GralTable.ButtonTable.w-pagination
    %tr
      %th= t('views.call_logs.index.label.id')
      %th= t('views.call_logs.index.label.channel')
      %th= t('views.call_logs.index.label.direction')
      %th= t('views.call_logs.index.label.schedule')
      %th= t('views.call_logs.index.label.started')
      %th= t('views.call_logs.index.label.finished')
      %th= t('views.call_logs.index.label.duration')
      %th= t('views.call_logs.index.label.call_flow')
      %th= t('views.call_logs.index.label.status')
      - @project_variables.each do |variable|
        %th= variable.name
      %th &nbsp;

    - @logs.each do |log|
      - answers = Hash[log.call_log_answers.map {|c| [c.project_variable_id, c.value] }]
      - recorded_audios = Hash[log.call_log_recorded_audios.map {|r| [r.project_variable_id, r.key] }]

      %tr
        %td= log.id
        %td= log.channel.try(:name)
        %td= log.direction
        %td= log.schedule.try(:name)
        %td= raw time_ago log.started_at
        %td= raw time_ago log.finished_at
        %td= log.duration if log.duration && log.duration > 0
        %td= log.call_flow.try(:name)
        %td
          - if log.state == CallLog::STATE_COMPLETED
            = log.state
          - else
            = CallLog::FAIL_REASONS[log.fail_reason]

        - @project_variables.each do |variable|
          - if recorded_audios.has_key? variable.id
            %td= link_to '', result_project_call_log_path(@project.id, log, key: recorded_audios[variable.id]), :class => 'fimport'

          - elsif answers.has_key? variable.id
            %td= answers[variable.id]

          - else
            %td &nbsp;

        %td= link_to t('views.call_logs.index.action.view_details'), call_log_path(log, project_id: @project.id) if log.store_log_entries

    = paginate @logs
