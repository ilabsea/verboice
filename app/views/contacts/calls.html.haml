= render 'shared/project_tabs_and_title', :project => @project, :shared_project => @shared_project

%h2 Calls
%p.desc Calls made and received from this number

= render 'tabs'

%br
= render 'call_selector'
%br

.tablewrapp.no-wrap.scroll.contacts-table
  %table.GralTable
    %tr
      %th= t('views.call_logs.index.label.id')
      %th= t('views.call_logs.index.label.channel')
      %th= t('views.call_logs.index.label.direction')
      %th= t('views.call_logs.index.label.schedule')
      %th= t('views.call_logs.index.label.started')
      %th= t('views.call_logs.index.label.finished')
      %th= t('views.call_logs.index.label.duration')
      %th= t('views.call_logs.index.label.call_flow')
      %th= t('views.call_logs.index.label.status')
      - @project_variables.each do |variable|
        %th= variable.name
      %th

      - @logs.each do |call|
        - answers = Hash[call.call_log_answers.map {|c| [c.project_variable_id, c.value] }]
        - recorded_audios = Hash[call.call_log_recorded_audios.map {|r| [r.project_variable_id, r.key] }]
        %tr
          %td= call.id
          %td= call.channel.try(:name)
          %td= call.direction
          %td= call.schedule.try(:name)
          %td= raw time_ago call.started_at
          %td= raw time_ago call.finished_at
          %td= call.duration if call.duration
          %td= call.call_flow.try(:name)
          %td
            - if call.state == CallLog::STATE_COMPLETED
              = call.state
            - else
              = CallLog::FAIL_REASONS[call.fail_reason]

          - @project_variables.each do |variable|
            - if answers.has_key? variable.id
              %td= answers[variable.id]
            - elsif recorded_audios.has_key? variable.id
              %td= link_to '', result_call_log_path(log, key: recorded_audios[variable.id]), :class => 'fimport'
            - else
              %td &nbsp;

          %td= link_to 'view details', call_log_path(call, project_id: call.try(:project).try(:id))


%div#call_logs_paginator
  = form_tag({action: :calls}, method: :get) do
    - total_pages = (@logs.count/@per_page)+1

    - previous_btn_class = 'pprevious' + (if (@page.to_i - 1) < 1 then " disabled" else '' end)
    = link_to '', {action: 'calls', page: @page.to_i-1}, class: previous_btn_class

    - next_btn_class = 'pnext' + (if (@page.to_i + 1) > total_pages then " disabled" else '' end)
    = link_to '', {action: 'calls', page: @page.to_i+1}, class: next_btn_class

    = text_field_tag 'page', @page.to_i
    %span.label-info="of #{total_pages}"
    = submit_tag '', class: 'hidden'

%br/
